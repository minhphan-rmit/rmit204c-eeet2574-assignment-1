CREATE TABLE IF NOT EXISTS kafkapipeline.neodata (
  id TEXT,                        -- Unique ID of the NEO
  name TEXT,                      -- Name of the NEO
  close_approach_date DATE,       -- Date of close approach to Earth
  relative_velocity_kph FLOAT,    -- Relative velocity (km/h)
  miss_distance_km FLOAT,         -- Miss distance in kilometers
  estimated_diameter_min_km FLOAT,-- Minimum estimated diameter (km)
  estimated_diameter_max_km FLOAT,-- Maximum estimated diameter (km)
  is_potentially_hazardous BOOLEAN,-- Whether the NEO is potentially hazardous
  orbiting_body TEXT,             -- Orbiting body (e.g., Earth)
  PRIMARY KEY (id) -- Partition by ID, sort by close approach date
);

CREATE TABLE IF NOT EXISTS marsweather (
  sol INT,                  -- Martian Sol (day)
  season TEXT,              -- Martian season (winter, spring, summer, fall)
  first_utc TIMESTAMP,      -- First recorded timestamp (Earth time)
  last_utc TIMESTAMP,       -- Last recorded timestamp (Earth time)
  at_avg FLOAT,             -- Average atmospheric temperature (°C)
  at_min FLOAT,             -- Minimum atmospheric temperature (°C)
  at_max FLOAT,             -- Maximum atmospheric temperature (°C)
  hws_avg FLOAT,            -- Average horizontal wind speed (m/s)
  hws_min FLOAT,            -- Minimum horizontal wind speed (m/s)
  hws_max FLOAT,            -- Maximum horizontal wind speed (m/s)
  pre_avg FLOAT,            -- Average atmospheric pressure (Pa)
  pre_min FLOAT,            -- Minimum atmospheric pressure (Pa)
  pre_max FLOAT,            -- Maximum atmospheric pressure (Pa)
  most_common_wind TEXT,    -- Most common wind direction (e.g., N, ESE)
  PRIMARY KEY (sol)         -- Use Sol as the partition key
);

import os
import time
import json
import requests
from kafka import KafkaProducer

# Environment Variables
KAFKA_BROKER_URL = os.environ.get("KAFKA_BROKER_URL", "localhost:9092")
TOPIC_NAME = os.environ.get("TOPIC_NAME", "marsweather")
SLEEP_TIME = int(os.environ.get("SLEEP_TIME", 1))
BASE_URL = "https://api.nasa.gov/insight_weather/"
PARAMS = {
    "api_key": "1EUj0kjNhYsCLWlQ0ESsIhZLmHtpvmqwoQ8kVGGw",
    "feedtype": "json",
    "ver": "1.0"
}

def fetch_mars_weather():
    """
    Fetch the latest Mars weather data from NASA's InSight API.
    """
    try:
        response = requests.get(BASE_URL, params=PARAMS)
        if response.status_code != 200:
            print(f"Error fetching Mars weather from NASA API: {response.status_code} - {response.text}")
            return None
        return response.json()
    except Exception as e:
        print(f"Error during API request: {e}")
        return None


def format_weather_data(sol, weather_data):
    """
    Format Mars weather data for a specific Sol into a flat JSON structure.
    """
    try:
        formatted_data = {
            "sol": sol,
            "season": weather_data.get("Season", ""),
            "first_utc": weather_data.get("First_UTC", ""),
            "last_utc": weather_data.get("Last_UTC", ""),
            "at_avg": weather_data.get("AT", {}).get("av", None),
            "at_min": weather_data.get("AT", {}).get("mn", None),
            "at_max": weather_data.get("AT", {}).get("mx", None),
            "hws_avg": weather_data.get("HWS", {}).get("av", None),
            "hws_min": weather_data.get("HWS", {}).get("mn", None),
            "hws_max": weather_data.get("HWS", {}).get("mx", None),
            "pre_avg": weather_data.get("PRE", {}).get("av", None),
            "pre_min": weather_data.get("PRE", {}).get("mn", None),
            "pre_max": weather_data.get("PRE", {}).get("mx", None),
            "most_common_wind": weather_data.get("WD", {}).get("most_common", {}).get("compass_point", None),
        }
    except Exception as e:
        print(f"Error formatting weather data: {e}")
        formatted_data = None

    return formatted_data


def run():
    """
    Main producer loop to fetch Mars weather data and send it to Kafka.
    """
    print(f"Setting up Mars Weather producer at {KAFKA_BROKER_URL}")
    producer = KafkaProducer(
        bootstrap_servers=[KAFKA_BROKER_URL],
        value_serializer=lambda x: json.dumps(x).encode('utf-8'),
    )

    while True:
        print("Fetching Mars weather data...")
        data = fetch_mars_weather()

        if data is None:
            print("No data fetched. Retrying after sleep interval.")
            time.sleep(SLEEP_TIME)
            continue

        sol_keys = data.get("sol_keys", [])
        if not sol_keys:
            print("No Sol data available. Retrying after sleep interval.")
            time.sleep(SLEEP_TIME)
            continue

        for sol in sol_keys:
            sol_data = data.get(sol, {})
            formatted_weather = format_weather_data(sol, sol_data)

            if formatted_weather:
                print(f"Sending Mars weather data for Sol {sol}")
                producer.send(TOPIC_NAME, value=formatted_weather)
                print("Mars weather data sent.")
            else:
                print(f"Failed to format weather data for Sol {sol}")

            time.sleep(SLEEP_TIME)

if __name__ == "__main__":
    run()

INSERT INTO kafkapipeline.neodata (
  id, 
  name, 
  close_approach_date, 
  relative_velocity_kph, 
  miss_distance_km, 
  estimated_diameter_min_km, 
  estimated_diameter_max_km, 
  is_potentially_hazardous, 
  orbiting_body
) VALUES (
  '54282205', 
  '(2022 LK1)', 
  '2024-11-29', 
  42498.9451481263, 
  53782291.02888308, 
  0.0614546821, 
  0.1374168468, 
  False, 
  'Earth'
);
